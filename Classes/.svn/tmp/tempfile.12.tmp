    //
//  GameViewController.m
//  GL
//
//  Created by Viktor Holmqvist on 2011-02-01.
//  Copyright 2011 Chalmers Tekniska HÃ¶gskola. All rights reserved.
//

#import <QuartzCore/QuartzCore.h>

#import "GameViewController.h"
#import "GLViewController.h"
#import "MeshModel.h"
#import "ViewModel.h"
#import "BehaveModel.h"
#import "GameObject.h"
#import "InputController.h"
#import "Matrix.h"

@implementation GameViewController
@synthesize animating, displayLink, glViewController, inputController;

// Send UI actions to the input controller
- (UIResponder *)nextResponder {
	return inputController;
}

// Implement loadView to create a view hierarchy programmatically, without using a nib.
- (void)loadView {
	
	GLViewController *vc = [[GLViewController alloc] init];
	self.glViewController = vc;
	[vc release];
	
	UIView *view = [[UIView alloc] initWithFrame:[UIScreen mainScreen].applicationFrame];
	self.view = view;
	[view release];
	
	animating = FALSE;
    animationFrameInterval = 1;
    self.displayLink = nil;
	
	InputController *ic = [[InputController alloc] init];
	self.inputController = ic;
	[ic release];
	
	UIAccelerometer *ac = [UIAccelerometer sharedAccelerometer];
	self.inputController.accelerometer = ac;
	[ac release];
	
	self.inputController.accelerometer.updateInterval = 0.1;
	self.inputController.accelerometer.delegate = self.inputController;
		
    [self.view addSubview:self.glViewController.view];
	
	viewModel = [ViewModel getInstance];
	
	behaveModel = [[BehaveModel alloc] init];
	worldArray = [[NSMutableArray alloc] init];
	behaveModel.inputController = self.inputController;
	[self initGame];
}

// The update method is called on each frame update to update the state of the world.
- (void)update {
	[worldArray makeObjectsPerformSelector:@selector(update)];
	[glViewController draw:worldArray];
}

// Initialize objects
- (void)initGame
{
	
	GameObject *dancingQuad = [[GameObject alloc] init];
	[dancingQuad setBehaviourCallback:@selector(behaviourMoveInCircle:) withDelegate:behaveModel];
	[dancingQuad setDrawCallback:@selector(drawWithTexture:) withDelegate:viewModel];
	[dancingQuad setTexture:@"textureTest.jpg"];
	[worldArray addObject:dancingQuad];
	[dancingQuad release];
	
	/*
	GameObject *jumpingQuad = [[GameObject alloc] init];
	[jumpingQuad setBehaviourCallback:@selector(behaviourMoveUpAndDown:) withDelegate:behaveModel];
	[jumpingQuad setDrawCallback:@selector(drawMesh:) withDelegate:viewModel];
	[worldArray addObject:jumpingQuad];
	[jumpingQuad release];
	*/
	
	GameObject *jumpingCircle1 = [[GameObject alloc] initWithMesh:[MeshModel meshCircle] withX:-2.0 andWithY:-3.5];
	[jumpingCircle1 setBehaviourCallback:@selector(behaviourMoveUpAndDown:) withDelegate:behaveModel];
	[jumpingCircle1 setDrawCallback:@selector(drawWithColor:) withDelegate:viewModel];
	[jumpingCircle1 setTexture:@"textureTest.jpg"];
	[worldArray addObject:jumpingCircle1];
	[jumpingCircle1 release];
	 
	
	/*GameObject *jumpingCircle2 = [[GameObject alloc] initWithMesh:[MeshModel meshCircle] withX:2.0 andWithY:3.5];
	[jumpingCircle2 setBehaviourCallback:@selector(behaviourMovePhysics:) withDelegate:behaveModel];
	[jumpingCircle2 setDrawCallback:@selector(drawMesh:) withDelegate:viewModel];
	[worldArray addObject:jumpingCircle2];
	[jumpingCircle2 release];*/
	 
}

- (NSInteger)animationFrameInterval
{
    return animationFrameInterval;
}

- (void)viewWillAppear:(BOOL)animated
{
    [self startAnimation];
    
    [super viewWillAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [self stopAnimation];
    
    [super viewWillDisappear:animated];
}

- (void)setAnimationFrameInterval:(NSInteger)frameInterval
{
    /*
	 Frame interval defines how many display frames must pass between each time the display link fires.
	 The display link will only fire 30 times a second when the frame internal is two on a display that refreshes 60 times a second. The default frame interval setting of one will fire 60 times a second when the display refreshes at 60 times a second. A frame interval setting of less than one results in undefined behavior.
	 */
    if (frameInterval >= 1)
    {
        animationFrameInterval = frameInterval;
        
        if (animating)
        {
            [self stopAnimation];
            [self startAnimation];
        }
    }
}

- (void)startAnimation
{
    if (!animating)
    {
        CADisplayLink *aDisplayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(update)];
        [aDisplayLink setFrameInterval:animationFrameInterval];
        [aDisplayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
        self.displayLink = aDisplayLink;
        
        animating = TRUE;
    }
}

- (void)stopAnimation
{
    if (animating)
    {
        [self.displayLink invalidate];
        self.displayLink = nil;
        animating = FALSE;
    }
}

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc. that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)dealloc {
	[behaveModel release];
	[viewModel release];
	[worldArray release];
	[inputController release];
	[glViewController release];
    [super dealloc];
}


@end
